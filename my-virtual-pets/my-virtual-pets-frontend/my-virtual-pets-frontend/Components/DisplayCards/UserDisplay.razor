@using my_virtual_pets_class_library.DTO
@using my_virtual_pets_class_library.Enums
@using my_virtual_pets_class_library.FriendlyStringifiers
@using my_virtual_pets_frontend.Components.Icons;
@rendermode InteractiveServer

<div class="usercard">
    <div class="container">
        <div class="form-center">
            <div class="text-center gap-3 m-3">
                <h3 class="fw-bold">hey, @(UserDisplayDto.Username)!</h3>
            </div>
            <div class="card-body text-center">
                <p>name (invisible to others): @UserDisplayDto.FirstName.ToLower() @UserDisplayDto.LastName.ToLower()</p>
                <p>email: @UserDisplayDto.Email</p>
                <p>pets owned: @UserDisplayDto.PetCount</p>
                <p>favourite pet type(s): @FavePetType</p>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public required UserDisplayDTO UserDisplayDto { get; set; }
    
    [Parameter]
    public required List<PetCardDataDTO> UserFavePets { get; set; }

    public required string FavePetType { get; set; }

    protected override void OnInitialized()
    {
        FavePetType = GetFavouritePetType();
    }

    private string GetFavouritePetType()
    {
        if (UserFavePets.Count == 0)
        {
            return "no pets favourited yet...";
        }
        if (UserFavePets.Count == 1)
        {
            return UserFavePets[0].PetType.FriendlyStringify();
        }
        
        Dictionary<PetType, int> scoreboard = Enum
            .GetValues(typeof(PetType))
            .Cast<PetType>()
            .SkipLast(1) // ignore "OTHER"
            .ToDictionary(petType => petType, pt => 0);
        
        foreach (PetCardDataDTO favePet in UserFavePets)
        {
            scoreboard[favePet.PetType]++;
        }
        
        var topScore = scoreboard.Values.Max();
        List<string> topScoringPets = scoreboard
            .Where(kvp => kvp.Value >= topScore)
            .Select(kvp => kvp.Key.FriendlyStringify())
            .ToList();
    
        switch (topScoringPets.Count)
        {
            case 1: return topScoringPets[0];
            case 2: return $"{topScoringPets[0]} and {topScoringPets[1]}";
            case 3: return $"{topScoringPets[0]}, {topScoringPets[1]} and {topScoringPets[2]}";
            default:
            {
                string result = "";
                for (int i = 0; i < topScoringPets.Count - 2; i++)
                {
                    result += $"{topScoringPets[i]}, ";
                }
                return $"{result}{topScoringPets[^2]} and {topScoringPets[^1]}";
            }
        }
    }
}
