@using my_virtual_pets_frontend.Components.Icons
@using System.Security.Claims
@using my_virtual_pets_class_library.DTO
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@rendermode InteractiveServer

@* <span class="badge bg-success">Score: </span> *@
<p><Score petscore="@petCard.Score"></Score></p>
<div @onclick="Pet">
    @if (IsPet)
    {
        <Paw_svg></Paw_svg>
    }
    else
    {
        <OutlinePaw_svg></OutlinePaw_svg>
    }
</div>

@code {
    
    [Parameter]
    public PetCardDataDTO petCard { get; set; }
    
    private string UserId;
    
    public bool IsPet { get; set; } = false;

    [CascadingParameter] 
    public List<Guid> FavouriteList { get; set; } = new List<Guid>(); 
    
    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthStateProvider.GetAuthenticationStateAsync()).User;
        UserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (UserId != null)
        {
            if (FavouriteList.Contains(petCard.PetId))
            {
                IsPet = true; 
            }
        }
    }
    
    public void Pet()
    {
        IsPet = !IsPet;
        if (IsPet)
        {
            DoPet(); 
        }
        else
        {
            UnPet(); 
        }
    }

    public async Task DoPet()
    {
        if (UserId == null)
        {
            Navigation.NavigateTo("/log-in");
        }
        var client = new BackendClient<Favourites>($"api/User/AddToFavourites", AuthStateProvider);
        await client.PostRequest(new Favourites { GlobalUserId = Guid.Parse(UserId), PetId = petCard.PetId });
        petCard.UpdateScore(true);
        StateHasChanged();
    }

    public async Task UnPet()
    {
        if (UserId == null)
        {
            Navigation.NavigateTo("/log-in");
        }
        var client = new BackendClient<Favourites>($"api/User/{UserId}/RemoveFromFavourites/{petCard.PetId}", AuthStateProvider);
        await client.DeleteRequest();
        petCard.UpdateScore(false);
        StateHasChanged();
    }
}