@page "/collection"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using my_virtual_pets_class_library.DTO
@using my_virtual_pets_frontend.Components.Icons
@using my_virtual_pets_frontend.Components.DisplayCards
@using my_virtual_pets_frontend.Components.LoginSignupComponents
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@rendermode InteractiveAuto

<PageTitle>Collection | MyVirtualPets</PageTitle>

<AuthorizeView>
    <NotAuthorized>
        <section class="container text-center">
            <div class="container">
                <h1 class="fw-bold py-6">Your Collection</h1>
                <p>Login to view your collection</p>
                <CascadingValue Value="Refresh">
                <FormSwitcher></FormSwitcher>
                </CascadingValue>
                <hr class="my-4"/>
            </div>
        </section>
    </NotAuthorized>
    <Authorized>
        @if (_petCardDataDTOs is null) 
        {
            <Cat_Loader></Cat_Loader>
        } else if (_petCardDataDTOs.Count() >= 0)
        {
            <section class="container text-center">
                <div class="container">
                    <h1 class="fw-bold py-6">@context.User.Identity?.Name's Collection</h1>
                    <button @onclick="HandleAddPet" class="btn btn-light d-block mx-auto mt-4" >Add Pet</button>
                    <hr class="my-4"/>
                </div>
            </section>

            <div class="container">
                <div class="row">
                    @foreach (var item in _petCardDataDTOs)
                    {
                        <PetCard PetCardData="item" DeleteMethod="DeleteFromCollection"/>
                    }
                </div>
            </div>
        }

    </Authorized>
</AuthorizeView>

@code {

    private string UserId;

    private List<PetCardDataDTO> _petCardDataDTOs = new List<PetCardDataDTO>();

    public string token { get; set; }

    public bool Refresh { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthStateProvider.GetAuthenticationStateAsync()).User;
        UserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (UserId != null)
        {
            var getclient = new BackendClient<List<PetCardDataDTO>>($"api/pets/user/{UserId}");
            _petCardDataDTOs = await getclient.GetRequest();
        }
    }

    public async Task DeleteFromCollection(Guid petId)
    {
        var client = new BackendClient<int>($"api/pets/{petId}");
        await client.DeleteRequest();
        var getclient = new BackendClient<List<PetCardDataDTO>>($"api/pets/user/{UserId}");
        _petCardDataDTOs = await getclient.GetRequest();
    }

    public void HandleAddPet()
    {
        Console.WriteLine("CLICKED");
        Navigation.NavigateTo("/add-pet");
    }

}
