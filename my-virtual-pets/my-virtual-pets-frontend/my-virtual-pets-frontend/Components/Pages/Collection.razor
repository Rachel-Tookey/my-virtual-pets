@page "/collection"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using my_virtual_pets_class_library.DTO
@using my_virtual_pets_frontend.Components.Icons
@using my_virtual_pets_frontend.Components.DisplayCards
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@rendermode InteractiveAuto

<PageTitle>Collection | MyVirtualPets</PageTitle>

<AuthorizeView>
    <Authorized>
        <p>Hello, @context.User.Identity?.Name!</p>
        <p>@context.User.FindFirst(ClaimTypes.NameIdentifier)?.Value</p>
    </Authorized>
    <NotAuthorized>
        @{
            Navigation.NavigateTo("/login");
        }
    </NotAuthorized>
</AuthorizeView>

@if (UserId == null)
{
    Navigation.NavigateTo("/login"); 
} else if (_petCardDataDTOs is null) 
{
    <Cat_Loader></Cat_Loader>
} else if (_petCardDataDTOs.Count() == 0)
{
    <section class="container text-center">
        <div class="container">
            <h1 class="fw-bold py-6">My Collection</h1>
            <button onclick="() => HandleAddPet" class="btn btn-primary my-2">Add Pet</button>
            <hr class="my-4"/>
        </div>
    </section>
} else if (_petCardDataDTOs.Count() > 0)
{
            <div class="container">
                <div class="row">
                    <Virtualize Items="_petCardDataDTOs" Context="petCardDataDTO">
                        <PetCard PetCardData="petCardDataDTO" DeleteMethod="DeleteFromCollection"/>
                    </Virtualize>
                </div>
            </div>
}


@code {

    private string UserId;

    private List<PetCardDataDTO> _petCardDataDTOs = new List<PetCardDataDTO>();

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthStateProvider.GetAuthenticationStateAsync()).User;
        UserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        var getclient = new BackendClient<List<PetCardDataDTO>>($"api/pets/user/{UserId}");
        _petCardDataDTOs = await getclient.GetRequest(); 
    }
    
    public async Task DeleteFromCollection(Guid petId) {
        var client = new BackendClient<int>($"api/pets/{petId}");
        await client.DeleteRequest();
        var getclient = new BackendClient<List<PetCardDataDTO>>($"api/pets/user/{UserId}");
        _petCardDataDTOs = await getclient.GetRequest(); 
    }
    
    public async Task HandleAddPet()
    {
        Navigation.NavigateTo("/add-pet");
    }

}