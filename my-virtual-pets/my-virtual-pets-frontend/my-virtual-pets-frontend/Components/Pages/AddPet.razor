@using System.Security.Claims
@using my_virtual_pets_class_library.DTO
@using my_virtual_pets_frontend.Components.AddPetComponents
@using my_virtual_pets_class_library.Enums
@using my_virtual_pets_frontend.Components.LoginSignupComponents
@inject NavigationManager Navigation;
@inject AuthenticationStateProvider AuthStateProvider;
@rendermode InteractiveServer

@page "/add-pet"

<PageTitle>Add Pet | MyVirtualPets</PageTitle>
<AuthorizeView>
    <NotAuthorized>
        <section class="container text-center">
            <div class="container">
                <h1 class="fw-bold py-6">Add Pet</h1>
                <p>Login to add a pet</p>
                <CascadingValue Value="Refresh">
                    <FormSwitcher></FormSwitcher>
                </CascadingValue>
                <hr class="my-4"/>
            </div>
        </section>
    </NotAuthorized>
    <Authorized>
        <div class="container">
            <h1 class="text-center mb-5">Add a Pet!</h1>
            <div id="formcenter">
                @if (!_isSuccessfulPetPost)
                {
                    @if (_displayPetPreview)
                    {
                        <div class="d-flex justify-content-center">
                            <figure>
                                <img src="@PetDetails.ImageUrl" alt="" width="300" height="auto"/>
                                <figcaption class="text-success text-center mt-1"><i>Your new VirtualPet!</i></figcaption>
                            </figure>
                        </div>
                    }
                    <CascadingValue Value="PetDetails">
                        @if (!_isSuccessfulUpload)
                        {
                            <UploadImageForm
                                OnSuccessfulUpload="@HandleSuccessfulUpload">
                            </UploadImageForm>
                        }
                        else
                        {
                            <AddPetDetailsForm
                                PetPostPending="@(() => _displayPetPreview = false)"
                                PetPostFailed="@(() => _displayPetPreview = true)"
                                PetPostSucceeded="@HandleSuccessfulPetPost">
                            </AddPetDetailsForm>
                        }
                    </CascadingValue>
                }
                else
                {
                    <h3>Hooray! @PetDetails.PetName is waiting for you in Collection...</h3>
                    <button @onclick="@(() => Navigation.NavigateTo("/collection"))" id="submitpetdetailsbutton" class="btn btn-light d-block mx-auto mt-4" type="submit">To Collections!</button>
                }
            </div>
        </div>
    </Authorized>
</AuthorizeView>




@code {
    [CascadingParameter] public required AddPetDTO? PetDetails { get; set; }
    
    public bool Refresh { get; set; } = true;

    private bool _isSuccessfulUpload;
    private bool _isSuccessfulPetPost;
    private bool _displayPetPreview;
    
    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthStateProvider.GetAuthenticationStateAsync()).User;
        string? userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (userId != null)
        {
            PetDetails = new()
            {
                PetName = "",
                Description = "",
                ImageUrl = "",
                OwnerId = new Guid(userId),
                Personality = Enum.GetValues(typeof(Personality)).Cast<Personality>().ToList()[0],
                PetType = PetType.OTHER
            };
        }
        
        _isSuccessfulUpload = false;
        _isSuccessfulPetPost = false;
        _displayPetPreview = false;
    }

    private void HandleSuccessfulUpload()
    {
        _isSuccessfulUpload = true; 
        _displayPetPreview = true;
    }

    private void HandleSuccessfulPetPost()
    {
        _isSuccessfulPetPost = true;
        _displayPetPreview = false;
    }
}