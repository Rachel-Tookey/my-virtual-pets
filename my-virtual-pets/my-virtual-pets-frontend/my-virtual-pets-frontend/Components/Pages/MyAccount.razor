@page "/my-account"
@using System.Security.Claims
@using my_virtual_pets_class_library.DTO
@using my_virtual_pets_frontend.Components.Icons
@using my_virtual_pets_frontend.Components.DisplayCards
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
<PageTitle>my account | my-virtual-pets</PageTitle>

<AuthorizeView>
    <NotAuthorized>
        @{
            Navigation.NavigateTo("/log-in");
        }
    </NotAuthorized>
    <Authorized>
        <h1 class="page-title text-center">my account</h1>
        <div id="formcenter">
            @if (_exceptionHappened)
            {
                <h3>something went wrong!</h3>
                <p>click on a link in the navbar or try refreshing to get back on track.</p>
            }
            else
            {
                @if (_userInfo == null || _favePets == null)
                {
                    <div class="text-center">
                        <h3>loading your info...!</h3>
                        <Cat_Loader></Cat_Loader>
                    </div>
                }
                else
                {
                    <UserDisplay
                        UserDisplayDto="@_userInfo"
                        UserFavePets="@_favePets"/>
                }
            }
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private UserDisplayDTO? _userInfo;
    private List<PetCardDataDTO>? _favePets;
    public string userId; 
    private bool _exceptionHappened;

    public async Task GetUserInfo()
    {
        var userClient = new BackendClient<UserDisplayDTO>($"api/User/{userId}", AuthStateProvider);
        Console.WriteLine($"https://localhost:7091/api/User/{userId}");
        _userInfo = await userClient.GetRequest();
        Console.WriteLine(_userInfo.Username);
    }
        
    async Task GetFavePets()
    {
        var favePetClient = new BackendClient<List<PetCardDataDTO>>($"api/User/{userId}/FavouritePets", AuthStateProvider);
        _favePets = await favePetClient.GetRequest();
        Console.WriteLine(_favePets.Count);
    }
    
    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthStateProvider.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        
        await GetUserInfo();
        await GetFavePets();
    }
    // try
        // {
            
        // }
        // catch (Exception ex)
        // {
        //     Console.WriteLine($"Exception when awaiting GetUserInfo(): {ex.Message}");
        //     _exceptionHappened = true;
        // }
        // try
        
        // }
        // catch (Exception ex)
        // {
        //     Console.WriteLine($"Exception when awaiting GetFavePets(): {ex.Message}");
        //     _exceptionHappened = true;
        // }
        
        
       
    
}