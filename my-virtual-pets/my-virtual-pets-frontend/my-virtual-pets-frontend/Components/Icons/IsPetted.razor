@using my_virtual_pets_frontend.Components.Icons
@using System.Security.Claims
@using my_virtual_pets_class_library.DTO
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation


<div @onclick="Pet">
@if (IsPet)
{
    <Paw_svg></Paw_svg>
}
else
{
    <OutlinePaw_svg></OutlinePaw_svg>
}
</div>

@code {
    
    [Parameter]
    public Guid PetId { get; set; }
    
    private string UserId;
    
    public bool IsPet { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthStateProvider.GetAuthenticationStateAsync()).User;
        UserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (UserId != null)
        {
            var client = new BackendClient<BoolReturn>($"api/User/{UserId}/IsFavourited/{PetId}");
            var IsFavourite = await client.GetRequest();
            if (IsFavourite != null)
            {
                IsPet = IsFavourite.IsFavourite; 
            }
        }
    }
    
    public void Pet()
    {
        IsPet = !IsPet;
        if (IsPet)
        {
            DoPet(); 
        }
        else
        {
            UnPet(); 
        }
    }

    public async Task DoPet()
    {
        if (UserId == null)
        {
            Navigation.NavigateTo("/login");
        }
        var client = new BackendClient<Favourites>($"api/User/AddToFavourites");
        client.PostRequest(new Favourites { GlobalUserId = Guid.Parse(UserId), PetId = PetId });
    }

    public async Task UnPet()
    {
        if (UserId == null)
        {
            Navigation.NavigateTo("/login");
        }
        var client = new BackendClient<Favourites>($"api/User/{UserId}/RemoveFromFavourites/{PetId}");
        client.DeleteRequest();
    }
    
    
}