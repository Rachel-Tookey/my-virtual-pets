@using System.Diagnostics
@using System.Net
@using System.Security.Claims
@using my_virtual_pets_class_library.DTO
@inject NavigationManager NavMan 
@inject AuthenticationStateProvider CustomAuth
@inject CustomAuthenticationService AuthService

@rendermode InteractiveServer

<div class="container">
    @if (_redirecting)
    {
        <div class="">
            <h3 class="d-flex justify-content-center align-items-center mb-0 text-center">success! redirecting you to add your first pet: @_redirectSecondsRemaining</h3>
        </div>
    }
    else
    {
        <EditForm FormName="Login" Model="@userDetails" OnInvalidSubmit="HandleInvalidSubmit" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator/>

        <div class="row">
            <div class="col-sm-12 col-md-6 input form-group">
                <label for="InputFirstName">first name:</label>
                <InputText id="InputFirstName" class="form-control" @bind-Value="@userDetails.FirstName"/>
                <ValidationMessage For="@(() => userDetails.FirstName)"/>
            </div>

            <div class="col-sm-12 col-md-6 input form-group">
                <label for="InputLastName">last name:</label>
                <InputText id="InputLastName" class="form-control" @bind-Value="@userDetails.LastName"/>
                <ValidationMessage For="@(() => userDetails.LastName)"/>
            </div>
        </div>

        <div style="height:8px">
        </div>

        <div class="row">
            <div class="col-sm-12 col-md-6 input form-group">
                <label for="InputEmail">email:</label>
                <InputText id="InputEmail" class="form-control" @bind-Value="@userDetails.Email"/>
                <ValidationMessage For="@(() => userDetails.Email)"/>
            </div>

            <div class="col-sm-12 col-md-6 input form-group">
                <label for="InputUsername">username:</label>
                <input type="text" id="InputUsername" class="form-control" @bind="Username" @bind:event="oninput"/>
                <ValidationMessage For="@(() => userDetails.Username)"/>
                <div style="height:8px">
                    <p style="color: @color">@UsernameTaken</p>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-12 col-md-6 input form-group">
                <label for="InputPassword">password:</label>
                <InputText id="InputPassword" type="password" class="form-control" @bind-Value="@userDetails.Password"/>
                <ValidationMessage For="@(() => userDetails.Password)"/>
            </div>

            <div class="col-sm-12 col-md-6 input form-group">
                <label for="InputComparePassword">confirm password:</label>
                <InputText id="InputComparePassword" type="password" class="form-control" @bind-Value="@userDetails.ComparePassword"/>
                <ValidationMessage For="@(() => userDetails.ComparePassword)"/>
            </div>

            <div style="height:8px">
            </div>

        </div>

        <div class="row">
            <p class="mb-0 text-center">by submitting this form you are agreeing to our service and privacy policy</p>
        </div>

        <h6 class="text-danger">@Feedback</h6>

        <button id="input registerbutton" class="btn btn-light d-block mx-auto mt-4" type="submit">sign up</button>

    </EditForm>
    }
    
</div>

@code {
    [Parameter] public EventCallback<bool> OnSignUpProcessing { get; set; }
    
    public NewUserDTO userDetails { get; set; }
    
    private string username = "";

    public string Username
    {
        get => username;
        set
        {
            username = value;
            userDetails.Username = username;
            CheckUsernameAsync();
        }
    }
    
    public string Feedback { get; set; }
    
    public string UsernameTaken { get; set; }
    
    public string color { get; set; } = "green";

    private bool _redirecting;
    private int _redirectSecondsRemaining = 3;
     
    protected override void OnInitialized()
    {
        userDetails = new NewUserDTO();
        userDetails.GDPRPermissions = true; 
    }

    public async Task CheckUsernameAsync()
    {
        var webclient = new BackendClient<BoolReturn>($"api/User/CheckUsername/{Username}", CustomAuth);
        BoolReturn UsernameCheck = await webclient.GetRequest();
        if (UsernameCheck != null)
        {
            if (UsernameCheck.IsTrue)
            {
                UsernameTaken = "username is taken...";
                color = "red";
            }
            else
            {
                if (Username == "")
                {
                    UsernameTaken = "";
                }
                else
                {
                    UsernameTaken = "username is free!";
                    color = "green";
                }
            }
            StateHasChanged();
        }
    }
    
    public void HandleInvalidSubmit()
    {
        Feedback = "oops let's try that again!"; 
    }

    public async Task HandleValidSubmit()
    {
        var webclient = new BackendClient<NewUserDTO>("api/user/register", CustomAuth);
        var response = await webclient.PostRequest(userDetails);
        if (response.StatusCode == HttpStatusCode.Created)
        {
            UserLoginDTO newLoginDetails = new()
            {
                Username = userDetails.Username,
                Password = userDetails.Password
            };
            await OnSignUpProcessing.InvokeAsync();
            await AutoLogIn(newLoginDetails);
            await RedirectToAddPet();
        } 
        else if (response.StatusCode == HttpStatusCode.BadRequest)
        {
            Feedback =  await response.Content.ReadAsStringAsync();  
        }
    }

    private async Task AutoLogIn(UserLoginDTO newLoginDetails)
    {
        HttpRequestMessage requestMessage = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7091/api/user/login");
        requestMessage.Content = JsonContent.Create(newLoginDetails);
        var client = new HttpClient();
        var response = await client.SendAsync(requestMessage);    
        
        if (response.StatusCode == HttpStatusCode.OK)
        {
            var tokenResponse = await response.Content.ReadFromJsonAsync<TokenResponse>();
            if (tokenResponse != null)
            {
                var identity = new ClaimsIdentity(
                    [
                        new Claim(ClaimTypes.Name, newLoginDetails.Username),
                        new Claim(ClaimTypes.Hash, tokenResponse.Token),
                        new Claim(ClaimTypes.NameIdentifier, tokenResponse.UserId)
                    ],
                    "Custom Authentication");
                
                AuthService.CurrentUser = new ClaimsPrincipal(identity);
            }
        } 
        else if (response.StatusCode == HttpStatusCode.BadRequest)
        {
            Feedback = await response.Content.ReadAsStringAsync();   
            Console.WriteLine(Feedback);
        }
    }

    private async Task RedirectToAddPet()
    {
        _redirecting = true;
        StateHasChanged();

        int initial = _redirectSecondsRemaining;
        for (int i = 0; i < initial; i++)
        {
            await Task.Delay(1000);
            _redirectSecondsRemaining--;
            StateHasChanged();
        }
        NavMan.NavigateTo("/add-pet");
    }
}