@using my_virtual_pets_class_library.DTO
@rendermode InteractiveAuto

<div class="container">
<EditForm FormName="Login" Model="@userDetails" OnInvalidSubmit="HandleInvalidSubmit" OnValidSubmit="HandleValidSubmit">
    <h3 class="pixeltext">Sign-up Form</h3>
    <DataAnnotationsValidator/>

    <div class="row">
    <div class="col input form-group">
        <label for="InputFirstName">First Name:</label>
        <InputText id="InputFirstName" class="form-control" @bind-Value="@userDetails.FirstName"/>
        <ValidationMessage For="@(() => userDetails.FirstName)"/>
    </div>

    <div class="col input form-group">
        <label for="InputLastName">Last Name:</label>
        <InputText id="InputLastName" class="form-control" @bind-Value="@userDetails.LastName"/>
        <ValidationMessage For="@(() => userDetails.LastName)"/>
    </div>
    </div>
    
    <div class="row">
    <div class="col input form-group">
        <label for="InputEmail">Email:</label>
        <InputText id="InputEmail" class="form-control" @bind-Value="@userDetails.Email"/>
        <ValidationMessage For="@(() => userDetails.Email)"/>
    </div>

    <div class="col input form-group">
        <label for="InputUsername">Username:</label>
        @* <InputText id="InputUsername" class="form-control" @bind-Value="@Username"/> *@

        <input type="text" id="InputUsername" class="form-control" @bind="Username" @bind:event="oninput"/>
        <span>@UsernameTaken</span>
        <ValidationMessage For="@(() => userDetails.Username)"/>
    </div>
    </div>

    <div class="row">
    <div class="col input form-group">
            <label for="InputPassword">Password:</label>
            <InputText id="InputPassword" type="password" class="form-control" @bind-Value="@userDetails.Password"/>
            <ValidationMessage For="@(() => userDetails.Password)"/>
            </div>

    <div class="col input form-group">
        <label for="InputAnimal">Fav pet:</label>
        <InputText id="InputAnimal" class="form-control" @bind-Value="@userDetails.FavAnimal"/>
        <ValidationMessage For="@(() => userDetails.FavAnimal)"/>
    </div>
    </div>

    <div class="row">

        <p style="font-size:10px">By submitting this form you are agreeing to our service and privacy policy</p>
    </div>
    
    <h6>@Feedback</h6>
    
    <button id="input registerbutton" class="btn btn-light d-block mx-auto mt-4" type="submit">Enter the doghouse</button>

</EditForm>
</div>

@code {
    
    public NewUserDTO userDetails { get; set; } 
    
    private string username = "";

    public string Username
    {
        get => username;
        set
        {
            username = value; 
            CheckUsernameAsync();
        }
    }
    
    public string Feedback { get; set; }
    
    public string UsernameTaken { get; set; } 
    
    protected override void OnInitialized()
    {
        userDetails = new NewUserDTO();
    }

    public async Task CheckUsernameAsync()
    {
        var webclient = new BackendClient<BoolReturn>($"api/User/CheckUsername/{Username}");
        BoolReturn UsernameCheck = await webclient.GetRequest();
        if (UsernameCheck != null)
        {
            if (UsernameCheck.IsFavourite)
            {
                UsernameTaken = "Username is taken"; 
            }
            else
            {
                UsernameTaken = "Username is free"; 
            }
        }
    }
    
    public void HandleInvalidSubmit()
    {
        Feedback = "Something has gone wrong"; 
    }

    public void HandleValidSubmit()
    {
        Feedback = "Submitted!";
        userDetails.Username = Username; 
        userDetails.GDPRPermissions = true; 
        var webclient = new BackendClient<NewUserDTO>("api/user/register");
        webclient.PostRequest(userDetails);
        userDetails = new NewUserDTO();
    }
    
}