@using System.Net
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.WebAssembly.Http
@using my_virtual_pets_class_library.DTO
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider CustomAuth
@inject CustomAuthenticationService AuthService
@rendermode InteractiveServer

<EditForm FormName="Login" Model="@loginDetails" OnInvalidSubmit="HandleInvalidSubmit" OnValidSubmit="HandleValidSubmit">
    <h3 class="pixeltext">Login</h3>
    <h6>@Success</h6>
    <DataAnnotationsValidator/>

        <div class="input form-group">
            <label for="InputUsername">Username:</label>
            <InputText id="InputUsername" class="form-control" @bind-Value="@loginDetails.Username"/>
            <ValidationMessage For="@(() => loginDetails.Username)"/>
        </div>
    
        <div class="input form-group">
            <label for="InputPassword">Password:</label>
            <InputText type="password" id="InputPassword" class="form-control" @bind-Value="@loginDetails.Password"/>
            <ValidationMessage For="@(() => loginDetails.Password)"/>
        </div>

        <button id="loginbutton" class="btn btn-light d-block mx-auto mt-4" type="submit">Enter the doghouse</button>
    
</EditForm>



@code {

    public UserLoginDTO loginDetails { get; set; } 
    
    public string Success { get; set; }
    
    protected override void OnInitialized()
    {
        loginDetails = new UserLoginDTO();
    }

    public void HandleInvalidSubmit()
    {
        Success = "Something has gone wrong"; 
    }

    public async Task HandleValidSubmit()
    {
        HttpRequestMessage requestMessage = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7091/api/user/login");
        requestMessage.SetBrowserRequestCredentials(BrowserRequestCredentials.Include);
        requestMessage.Content = JsonContent.Create(loginDetails);
        var client = new HttpClient();
        var response = await client.SendAsync(requestMessage);    
        
        if (response.StatusCode == HttpStatusCode.OK)
        {
            var tokenResponse = await response.Content.ReadFromJsonAsync<TokenResponse>();
            if (tokenResponse != null)
            {
                var token = tokenResponse.Token;
                var userid = tokenResponse.UserId;

                var identity = new ClaimsIdentity(
                    [
                        new Claim(ClaimTypes.Name, loginDetails.Username),
                        new Claim(ClaimTypes.Hash, token),
                        new Claim(ClaimTypes.NameIdentifier, userid)
                    ],
                    "Custom Authentication");

                var newUser = new ClaimsPrincipal(identity);

                AuthService.CurrentUser = newUser;
                
                Navigation.NavigateTo("/add-pet");
            }
           loginDetails = new UserLoginDTO(); 
        }

    }

}
    
