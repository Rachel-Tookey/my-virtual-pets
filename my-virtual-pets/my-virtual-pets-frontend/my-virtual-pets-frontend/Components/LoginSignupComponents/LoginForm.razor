@using System.Net
@using System.Security.Claims
@using my_virtual_pets_class_library.DTO
@using my_virtual_pets_frontend.Components.Icons
@inject NavigationManager Navigation
@inject AuthenticationStateProvider CustomAuth
@inject CustomAuthenticationService AuthService
@rendermode InteractiveServer

@if (_redirecting)
{
    <Cat_Loader></Cat_Loader>
}
else
{
    <EditForm FormName="Login" Model="@loginDetails" OnInvalidSubmit="HandleInvalidSubmit" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator/>

        <div class="input form-group">
            <label for="InputUsername">Username:</label>
            <InputText id="InputUsername" class="form-control" @bind-Value="@loginDetails.Username"/>
            <ValidationMessage For="@(() => loginDetails.Username)"/>
        </div>
    
        <div class="input form-group">
            <label for="InputPassword">Password:</label>
            <InputText type="password" id="InputPassword" class="form-control" @bind-Value="@loginDetails.Password"/>
            <ValidationMessage For="@(() => loginDetails.Password)"/>
        </div>
    
        <h6 class="text-danger">@Feedback</h6>
    
        <button id="loginbutton" class="btn btn-light d-block mx-auto mt-4" type="submit">Enter the doghouse</button>

        <button @onclick="LoginWithGoogle" class="btn btn-light d-block mx-auto mt-4">Log in with Google</button>
    </EditForm>
}




@code {
    [CascadingParameter] public bool Refresh { get; set; }
    
    [Parameter] public EventCallback<bool> OnLogInProcessing { get; set; }
    
    [Parameter] public EventCallback<bool> OnLogInFailed { get; set; }

    public UserLoginDTO loginDetails { get; set; } 
    
    public string Feedback { get; set; }

    private bool _redirecting;
    
    
    
    protected override void OnInitialized()
    {
        loginDetails = new UserLoginDTO();
    }

    public void HandleInvalidSubmit()
    {
        Feedback = "Something has gone wrong"; 
    }

    public async Task HandleValidSubmit()
    {
        _redirecting = true;
        StateHasChanged();
        await OnLogInProcessing.InvokeAsync();
        StateHasChanged();
        
        HttpRequestMessage requestMessage = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7091/api/user/login");
        requestMessage.Content = JsonContent.Create(loginDetails);
        var client = new HttpClient();
        var response = await client.SendAsync(requestMessage);    
        
        if (response.StatusCode == HttpStatusCode.OK)
        {
            var tokenResponse = await response.Content.ReadFromJsonAsync<TokenResponse>();
            if (tokenResponse != null)
            {
                var identity = new ClaimsIdentity(
                    [
                        new Claim(ClaimTypes.Name, loginDetails.Username),
                        new Claim(ClaimTypes.Hash, tokenResponse.Token),
                        new Claim(ClaimTypes.NameIdentifier, tokenResponse.UserId)
                    ],
                    "Custom Authentication");

                AuthService.CurrentUser = new ClaimsPrincipal(identity);
                
                Navigation.NavigateTo("/my-account");
                
                
                
                // if (Refresh)
                // {
                //     Navigation.Refresh(true);
                // } 
                // else 
                // {                
                //     Navigation.NavigateTo("/my-account");
                // }
            }
            else
            {
                _redirecting = false;
                StateHasChanged();
                await OnLogInFailed.InvokeAsync();
                StateHasChanged();
            }
           loginDetails = new UserLoginDTO(); 
           
        } 
        else if (response.StatusCode == HttpStatusCode.BadRequest)
        {
            Feedback = await response.Content.ReadAsStringAsync();
            
            _redirecting = false;
            StateHasChanged();
            await OnLogInFailed.InvokeAsync();
            StateHasChanged();
        }
        else
        {
            Feedback = "Something has gone wrong!";
            
            _redirecting = false;
            StateHasChanged();
            await OnLogInFailed.InvokeAsync();
            StateHasChanged();
        }
    }
    
    public void LoginWithGoogle()
    {
        Navigation.NavigateTo("https://localhost:7091/login-google", forceLoad: true);
    }

}
    
