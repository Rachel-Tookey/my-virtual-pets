@using my_virtual_pets_class_library.DTO
@using my_virtual_pets_class_library.Enums

<EditForm FormName="AddPetDetailsForm" Model="@PetDetails" OnInvalidSubmit="HandleInvalidSubmit" OnValidSubmit="HandleValidSubmit">
    <h3>Add Pet Details</h3>
    <h6 class="badge bg-danger">@_success</h6>
    <DataAnnotationsValidator/>

    <div class="form-group">
        <label for="InputPetName">Name: <span class="text-danger">*</span></label>
        <InputText id="InputPetName" class="form-control" @bind-Value="@PetDetails.PetName"/>
        <ValidationMessage For="@(() => PetDetails.PetName)"/>
    </div>

    <div class="form-group">
        <label for="InputPersonality">Personality: <span class="text-danger">*</span></label>
        <InputSelect id="InputPersonality" class="form-select" @bind-Value="@PetDetails.Personality">
            @foreach (Personality p in _personalities)
            {
                <option value="@p">@p</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => PetDetails.Personality)"/>
    </div>
    
    <div class="form-group">
        <label for="InputDescription">Description: <span class="text-danger">*</span></label>
        <InputTextArea id="InputDescription" class="form-control" @bind-Value="@PetDetails.Description"/>
        <ValidationMessage For="@(() => PetDetails.Description)"/>
    </div>
    
    <button id="registerbutton" class="btn btn-light" type="submit">Create Your Pet!</button>

</EditForm>


@code {
    
    public AddPetDTO PetDetails { get; set; } 
    private string? _success { get; set; }
    private List<Personality> _personalities;

    private Personality GetRandomPersonality(IEnumerable<Personality> personalities)
    {
        return _personalities[new Random().Next(_personalities.Count())];
    }
    
    protected override void OnInitialized()
    {
        _personalities = Enum.GetValues(typeof(Personality)).Cast<Personality>().ToList();
        
        PetDetails = new AddPetDTO()
        {
            PetName = "",
            Description = "",
            ImageUrl = "",
            OwnerId = Guid.NewGuid(),
            Personality = _personalities[0],
            PetType = PetType.OTHER
        };

        
    }

    public void HandleInvalidSubmit()
    {
        _success = "Something has gone wrong... Very wrong indeed..."; 
    }

    public async Task HandleValidSubmit()
    {
        _success = "Submitted!";
        var webclient = new BackendClient<AddPetDTO>("api/user/register");
        var response = await webclient.PostRequest(PetDetails);
        PetDetails = new AddPetDTO()
        {
            PetName = "",
            Description = "",
            ImageUrl = "",
            OwnerId = Guid.NewGuid(),
            Personality = (Personality)new Random().Next(0, 6),
            PetType = PetType.OTHER
        };
    }
    
}