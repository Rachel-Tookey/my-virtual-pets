@using System.Net
@using my_virtual_pets_class_library.DTO
@using my_virtual_pets_class_library.Enums

@rendermode InteractiveServer
<EditForm Model="@PetDetails" OnInvalidSubmit="HandleInvalidSubmit" OnValidSubmit="HandleValidSubmit">
    <h3>Add Pet Details</h3>
    <h6 class="@(_success == "Submitted!" ? "text-success" : "text-info")">@_success</h6>
    <DataAnnotationsValidator/>

    <div class="form-group">
        <label for="InputPetName">Name: <span class="text-danger">*</span></label>
        <InputText id="InputPetName" class="form-control" @bind-Value="@PetDetails.PetName"/>
        <ValidationMessage For="@(() => PetDetails.PetName)"/>
    </div>

    <div class="form-group">
        <label for="InputPersonality">Personality: <span class="text-danger">*</span></label>
        <InputSelect id="InputPersonality" class="form-select" @bind-Value="@PetDetails.Personality">
            @foreach (Personality p in _personalities)
            {
                <option value="@p">@p.ToString()</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => PetDetails.Personality)"/>
    </div>

    <div class="form-group">
        <label for="InputDescription">Description: <span class="text-danger">*</span></label>
        <InputTextArea id="InputDescription" class="form-control" @bind-Value="@PetDetails.Description"/>
        <ValidationMessage For="@(() => PetDetails.Description)"/>
    </div>

    <button id="submitpetdetailsbutton" class="btn btn-light d-block mx-auto mt-4" type="submit">Create Your Pet!</button>
</EditForm>
}

@code {
    [CascadingParameter] 
    public required AddPetDTO PetDetails { get; set; }
    
    [Parameter]
    public EventCallback<bool> OnSuccessfulPetPost { get; set; }
    
    private string? _success { get; set; }
    
    private List<Personality> _personalities = Enum
        .GetValues(typeof(Personality))
        .Cast<Personality>()
        .ToList();

    protected override void OnInitialized()
    {
        
    }

    public void HandleInvalidSubmit()
    {
        _success = "Something has gone wrong... Very wrong indeed..."; 
        Console.WriteLine($"invalid: {PetDetails.PetName} {PetDetails.Personality} {PetDetails.Description}");
    }

    public async Task HandleValidSubmit()
    {
        _success = "Submitted!";
        Console.WriteLine($"valid: {PetDetails.PetName} {PetDetails.Personality} {PetDetails.Description}");
        var webclient = new BackendClient<AddPetDTO>("api/pets");
        var response = await webclient.PostRequest(PetDetails); // just gets status code no body
        
        if (response == HttpStatusCode.OK)
        {
            await OnSuccessfulPetPost.InvokeAsync();
        }
        else
        {
            _success = "Uh oh, the server hamsters didn't like that! Try again.";
        }
        // no need to get the data back from request since it's bound to variables in the form
    }
}