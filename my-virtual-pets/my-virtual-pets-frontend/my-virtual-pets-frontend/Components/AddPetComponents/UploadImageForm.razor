@using System.Net
@using System.Text.Json
@using my_virtual_pets_class_library.DTO
@using my_virtual_pets_class_library.Enums
@using my_virtual_pets_class_library
@using my_virtual_pets_frontend.Components.Icons
@rendermode InteractiveServer


<EditForm Model="@_formModel" OnInvalidSubmit="HandleInvalidSubmit" OnValidSubmit="HandleValidSubmit">
    @if (_isFileBeingProcessed)
    {
        <h3 class="text-center mb-4">Uploading Image...</h3>
        <div class="d-block mx-auto my-6">
            <Cat_Loader></Cat_Loader>
        </div>
    }
    else
    {
        <h3 class="text-center mb-4">Upload Image!</h3>
        <DataAnnotationsValidator/>
        <div class="form-group">
            <div>
                Top Tips For Best Results:
                <ul>
                    <li>JPG or PNG image type</li>
                    <li>One pet per picture</li>
                    <li>Plain background, coloured differently to your pet</li>
                    <li>Upload a square image</li>
                    <li>Make sure your pet is either a cat, dog, rabbit, bird or fish</li>
                </ul>
            </div>
            <InputFile
                OnChange="OnInputFileChange"
                id="InputPetImage"
                class="form-control form-control-lg" />
            <ValidationMessage For="@(() => _file)"/>
        </div>
        <h6 class="mt-1 @_feedbackCssStyle"><i>@_feedback</i></h6>
        <button id="uploadimagebutton" class="btn btn-light d-block mx-auto mt-4" type="submit">Upload Image</button>
    }
</EditForm>



@code {
    public class FormModel
    {
        public IBrowserFile? InputFile { get; set; }
    }
    private FormModel _formModel = new();
    
    [CascadingParameter]
    public required AddPetDTO PetDetails { get; set; }
    
    [Parameter] 
    public EventCallback<bool> OnSuccessfulUpload { get; set; }
    
    private IBrowserFile? _file;
    private string _feedback = "";
    private string _feedbackCssStyle = "text-info";

    private bool _isFileBeingProcessed = false;

    private Func<IBrowserFile, bool> _isFileSizeValid = file => file.Size < Utility.MaxUploadFileSize - 56;
    private Func<IBrowserFile, bool> _isFileTypeValid = file => file.ContentType == "image/jpg" || file.ContentType == "image/jpeg" || file.ContentType == "image/png";
    
    public void OnInputFileChange(InputFileChangeEventArgs args)
    {
        _file = args.File;
        if (_isFileTypeValid(_file))
        {
            if (_isFileSizeValid(_file))
            {
                _feedback = "Image size and type are ok! ✅";
                _feedbackCssStyle = "text-success";
            }
            else
            {
                _feedback = "That picture is too heavy for the server hamsters to carry... try a smaller picture. ❌";
                _feedbackCssStyle = "text-warning";
            }
        }
        else
        {
            _feedback = "That picture isn't a valid image type: the server hamsters won't know what to do with it! ❌";
            _feedbackCssStyle = "text-warning";
        }
    }

    public void HandleInvalidSubmit()
    {
        _feedback = "Invalid image uploaded, try again. ❌";
        _feedbackCssStyle = "text-danger";
    }

    public async Task HandleValidSubmit()
    {
        

        if (_file != null)
        {
            if (_isFileTypeValid(_file))
            {
                if (_isFileSizeValid(_file))
                {
                    using var memoryStream = new MemoryStream();
                    await new StreamReader(_file.OpenReadStream(Utility.MaxUploadFileSize)).BaseStream.CopyToAsync(memoryStream);
                    byte[] bytes = memoryStream.ToArray();
                    _feedback = "Submitted!";
                    _feedbackCssStyle = "text-success";
                    await UploadValidImage(bytes);
                }
                else
                {
                    _feedback = "We tried to warn you... That pic's too big! ❌";
                    _feedbackCssStyle = "text-danger";
                }
            }
            else
            {
                _feedback = "Oi! That's not a jpg or png; try again. ❌";
                _feedbackCssStyle = "text-danger";
            }
        }
        else
        {
            _feedback = "You haven't selected an image yet! ❌";
            _feedbackCssStyle = "text-danger";
        }

        async Task UploadValidImage(byte[] bytes) //local function for encapsulation/abstraction
        {
            _isFileBeingProcessed = true;
            var webclient = new AddPetBackendClient<byte[]>("api/images");
            var postResponse = await webclient.ImageUploadPostRequest(bytes);

            if (postResponse.StatusCode == HttpStatusCode.OK)
            {
            
                Stream responseStream = await postResponse.Content.ReadAsStreamAsync();
                ImagesResponseDTO imagesResponseDto = await JsonSerializer.DeserializeAsync<ImagesResponseDTO>(responseStream) 
                                                      ?? throw new Exception("Something went wrong!");
            
                PetDetails.PetType = imagesResponseDto.PetType;
                PetDetails.ImageUrl = imagesResponseDto.ImageUrl;
            
                await OnSuccessfulUpload.InvokeAsync(true);
            }
            else
            {
                _feedback = "Try again, that image wasn't accepted.";
            }
            
            Console.WriteLine($"Response body: {await postResponse.Content.ReadAsStringAsync()}; Status code: {postResponse.StatusCode}");
            _isFileBeingProcessed = false;
        }
    }
}