@using System.ComponentModel.DataAnnotations
@using System.Net
@using System.Text.Json
@using my_virtual_pets_class_library.DTO
@using my_virtual_pets_class_library.Enums
@using my_virtual_pets_class_library
@using my_virtual_pets_frontend.Components.Icons
@rendermode InteractiveServer


<EditForm Model="@_formModel" OnInvalidSubmit="HandleInvalidSubmit" OnValidSubmit="HandleValidSubmit">
    @if (_isFileBeingProcessed)
    {
        <h3 class="text-center mb-4">Uploading Image...</h3>
        <div class="d-block mx-auto my-6">
            <Cat_Loader></Cat_Loader>
        </div>
    }
    else
    {
        <h3 class="text-center mb-4">Upload Image!</h3>
        <h6>@_feedback</h6>
        <DataAnnotationsValidator/>
        <div class="form-group">
            <div>
                Top Tips For Best Results:
                <ul>
                    <li>One pet per picture</li>
                    <li>Plain background, coloured differently to your pet</li>
                    <li>Upload a square image</li>
                    <li>Make sure your pet is either a cat, dog, rabbit, bird or fish</li>
                </ul>
            </div>
            <InputFile
                OnChange="OnInputFileChange"
                id="InputPetImage"
                class="form-control form-control-lg" />
            <ValidationMessage For="@(() => _file)"/>
        </div>
        <button id="uploadimagebutton" class="btn btn-light d-block mx-auto mt-4" type="submit">Upload Image</button>
    }
</EditForm>



@code {
    public class FormModel
    {
        public IBrowserFile? InputFile { get; set; }
    }
    private FormModel _formModel = new();
    
    [CascadingParameter]
    public required AddPetDTO PetDetails { get; set; }
    
    [Parameter] 
    public EventCallback<bool> OnSuccessfulUpload { get; set; }
    
    private IBrowserFile? _file;
    private string? _feedback;

    private bool _isFileBeingProcessed = false;
    
    public void OnInputFileChange(InputFileChangeEventArgs args) // do this when file is added to check if the user's file is too big
    {
        _file = args.File;
        _feedback = _file.Size > Utility.MaxUploadFileSize - 56 // 56 bytes are reserved for the C# array part of byte arrays
            ? "That picture is too big for the server hamsters to carry... try uploading a smaller picture."
            : "Image size is ok!";
    }

    public void HandleInvalidSubmit()
    {
        _feedback = "Something has gone wrong"; 
    }

    public async Task HandleValidSubmit()
    {
        _isFileBeingProcessed = true;
        byte[]? bytes = null;
        try
        {
            using var reader = new StreamReader(_file.OpenReadStream(Utility.MaxUploadFileSize));
            using var memstream = new MemoryStream();
            await reader.BaseStream.CopyToAsync(memstream);
            bytes = memstream.ToArray();
        }
        catch (Exception exception)
        {
            Console.WriteLine(exception);
            _feedback = "Oi! We warned you... Too big!";
            _isFileBeingProcessed = false;
            throw;
        }
        
        _feedback = "Submitted!";
        
        var webclient = new AddPetBackendClient<byte[]>("api/images");
        var postResponse = await webclient.ImageUploadPostRequest(bytes);

        if (postResponse.StatusCode == HttpStatusCode.OK)
        {
            
            Stream responseStream = await postResponse.Content.ReadAsStreamAsync();
            ImagesResponseDTO imagesResponseDto = await JsonSerializer.DeserializeAsync<ImagesResponseDTO>(responseStream) 
                                                  ?? throw new Exception("Something went wrong!");
            
            PetDetails.PetType = imagesResponseDto.PetType;
            PetDetails.ImageUrl = imagesResponseDto.ImageUrl;
            
            await OnSuccessfulUpload.InvokeAsync(true);
        }
        else
        {
            Console.WriteLine($"Response wasn't OK: {postResponse.StatusCode}");
            _feedback = "Try again, that image wasn't accepted.";
        }
        Console.WriteLine($"Response body: {await postResponse.Content.ReadAsStringAsync()}; Status code: {postResponse.StatusCode}");

        _isFileBeingProcessed = false;
    }
    
}