@using System.ComponentModel.DataAnnotations
@using my_virtual_pets_class_library.DTO

<EditForm FormName="UploadImageForm" Model="@_formModel" OnInvalidSubmit="HandleInvalidSubmit" OnValidSubmit="HandleValidSubmit">
    <h3>Upload Image</h3>
    <h6>@Success</h6>
    <DataAnnotationsValidator/>

        <div class="form-group">
            <label for="InputPetImage" class="form-label">Upload Image: <span class="text-danger">*</span></label>
            <InputFile OnChange="OnInputFileChange" id="InputPetImage" class="form-control form-control-lg" @bind-Value="@_inputFile"/>
            <ValidationMessage For="@(() => _inputFile)"/>
        </div>
    
        <button id="uploadimagebutton" class="btn btn-light" type="submit">Upload Image</button>

</EditForm>



@code {
    private InputFile? _inputFile;
    
    private class FormModel
    {
        [Required] private InputFile? _inputFile { get; set; }
    }
    private FormModel _formModel = new();
    
    
    public string Success { get; set; }
    
    private Stream? _stream;
    private int _maxFileSize = 512000;
    
    public void OnInputFileChange(InputFileChangeEventArgs e) // do this when file is added to check if the user's file is too big
    {
        try
        {
            _stream = e.File.OpenReadStream(maxAllowedSize: _maxFileSize);
        }
        catch (Exception exception) // catch block: catches IOException: file too big
        {
            Console.WriteLine(exception.Message);
            //TODO: add try again info to user
        }
    }
    
    protected override void OnInitialized()
    {
        
    }

    public void HandleInvalidSubmit()
    {
        Success = "Something has gone wrong"; 
    }

    public async Task HandleValidSubmit()
    {
        byte[]? bytes = null;

        try
        {
            using var ms = new MemoryStream();
            byte[] buffer = new byte[_maxFileSize];
            int bytesRead = 0;

            while ((bytesRead = _stream.Read(buffer)) > 0)
            {
                ms.Write(buffer);
            }
            bytes = ms.ToArray();
        }
        catch (Exception exception)
        {
            Console.WriteLine(exception);
            throw;
        }
        
        Success = "Submitted!";
        /*var webclient = new BackendClient<UserLoginDTO>("api/user/login");
        webclient.PostRequest();*/
    }
    
}