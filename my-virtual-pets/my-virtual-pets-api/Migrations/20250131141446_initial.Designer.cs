// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using my_virtual_pets_api.Data;

#nullable disable

namespace my_virtual_pets_api.Migrations
{
    [DbContext(typeof(VPSqlServerContext))]
    [Migration("20250131141446_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("my_virtual_pets_api.Entities.AuthUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Auth0Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GlobalUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Auth0Id")
                        .IsUnique();

                    b.HasIndex("GlobalUserId");

                    b.ToTable("AuthUsers");
                });

            modelBuilder.Entity("my_virtual_pets_api.Entities.GlobalUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "datejoined");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<bool>("GDPRPermissions")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "gdprpermissions");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("GlobalUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb7153f7-3101-444b-a91d-8c45280672d6"),
                            DateJoined = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "petlover123@example.com",
                            GDPRPermissions = true,
                            Username = "PetLover123"
                        },
                        new
                        {
                            Id = new Guid("f3922887-7fc2-447b-a08f-4fbbc663ba81"),
                            DateJoined = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "furryfan@example.com",
                            GDPRPermissions = false,
                            Username = "FurryFriendFan"
                        },
                        new
                        {
                            Id = new Guid("3e2db5ff-0ac8-48b9-b341-e14371c42e7a"),
                            DateJoined = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "animalenthusiast@example.com",
                            GDPRPermissions = true,
                            Username = "AnimalEnthusiast"
                        });
                });

            modelBuilder.Entity("my_virtual_pets_api.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "imageurl");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            ImageUrl = "https://my-virtual-pets-images.s3.eu-west-2.amazonaws.com/dogyesyes"
                        });
                });

            modelBuilder.Entity("my_virtual_pets_api.Entities.LocalUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "firstname");

                    b.Property<Guid>("GlobalUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "userid");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "lastname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "password");

                    b.HasKey("Id");

                    b.HasIndex("GlobalUserId");

                    b.ToTable("LocalUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-5678-9101-1121-314151617181"),
                            FirstName = "Alex",
                            GlobalUserId = new Guid("cb7153f7-3101-444b-a91d-8c45280672d6"),
                            LastName = "Johnson",
                            Password = "hashedpassword123"
                        },
                        new
                        {
                            Id = new Guid("b2c3d4e5-6789-0123-4567-890123456789"),
                            FirstName = "Jamie",
                            GlobalUserId = new Guid("f3922887-7fc2-447b-a08f-4fbbc663ba81"),
                            LastName = "Smith",
                            Password = "securepassword456"
                        },
                        new
                        {
                            Id = new Guid("c3d4e5f6-7890-1234-5678-901234567890"),
                            FirstName = "Taylor",
                            GlobalUserId = new Guid("3e2db5ff-0ac8-48b9-b341-e14371c42e7a"),
                            LastName = "Brown",
                            Password = "randompassword789"
                        });
                });

            modelBuilder.Entity("my_virtual_pets_api.Entities.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Description");

                    b.Property<Guid>("GlobalUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "userid");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "imageid");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int>("Personality")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "personality");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.HasKey("Id");

                    b.HasIndex("GlobalUserId");

                    b.HasIndex("ImageId");

                    b.ToTable("Pets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1e2f3a4-5678-9101-1121-314151617181"),
                            GlobalUserId = new Guid("cb7153f7-3101-444b-a91d-8c45280672d6"),
                            ImageId = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            Name = "Whiskers",
                            Personality = 2,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("e2f3a4b5-6789-0123-4567-890123456789"),
                            GlobalUserId = new Guid("f3922887-7fc2-447b-a08f-4fbbc663ba81"),
                            ImageId = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            Name = "Buddy",
                            Personality = 3,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("f3a4b5c6-7890-1234-5678-901234567890"),
                            GlobalUserId = new Guid("3e2db5ff-0ac8-48b9-b341-e14371c42e7a"),
                            ImageId = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            Name = "Floppy",
                            Personality = 1,
                            Type = 2
                        });
                });

            modelBuilder.Entity("my_virtual_pets_api.Entities.AuthUser", b =>
                {
                    b.HasOne("my_virtual_pets_api.Entities.GlobalUser", "GlobalUser")
                        .WithMany()
                        .HasForeignKey("GlobalUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GlobalUser");
                });

            modelBuilder.Entity("my_virtual_pets_api.Entities.LocalUser", b =>
                {
                    b.HasOne("my_virtual_pets_api.Entities.GlobalUser", "GlobalUser")
                        .WithMany()
                        .HasForeignKey("GlobalUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GlobalUser");
                });

            modelBuilder.Entity("my_virtual_pets_api.Entities.Pet", b =>
                {
                    b.HasOne("my_virtual_pets_api.Entities.GlobalUser", "GlobalUser")
                        .WithMany("Pets")
                        .HasForeignKey("GlobalUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("my_virtual_pets_api.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GlobalUser");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("my_virtual_pets_api.Entities.GlobalUser", b =>
                {
                    b.Navigation("Pets");
                });
#pragma warning restore 612, 618
        }
    }
}
