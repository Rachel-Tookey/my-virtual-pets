// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using my_virtual_pets_api.Data;

#nullable disable

namespace my_virtual_pets_api.Migrations
{
    [DbContext(typeof(VPSqlServerContext))]
    [Migration("20250130121437_initial_migrate")]
    partial class initial_migrate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("my_virtual_pets_api.Entities.AuthUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Auth0Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GlobalUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GlobalUserId");

                    b.ToTable("AuthUsers");
                });

            modelBuilder.Entity("my_virtual_pets_api.Entities.GlobalUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "datejoined");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<bool>("GDPRPermissions")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "gdprpermissions");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "username");

                    b.HasKey("Id");

                    b.ToTable("GlobalUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb7153f7-3101-444b-a91d-8c45280672d6"),
                            DateJoined = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "petlover123@example.com",
                            GDPRPermissions = true,
                            Username = "PetLover123"
                        },
                        new
                        {
                            Id = new Guid("f3922887-7fc2-447b-a08f-4fbbc663ba81"),
                            DateJoined = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "furryfan@example.com",
                            GDPRPermissions = false,
                            Username = "FurryFriendFan"
                        },
                        new
                        {
                            Id = new Guid("3e2db5ff-0ac8-48b9-b341-e14371c42e7a"),
                            DateJoined = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "animalenthusiast@example.com",
                            GDPRPermissions = true,
                            Username = "AnimalEnthusiast"
                        });
                });

            modelBuilder.Entity("my_virtual_pets_api.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ImageObj")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("my_virtual_pets_api.Entities.LocalUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GlobalUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GlobalUserId");

                    b.ToTable("LocalUsers");
                });

            modelBuilder.Entity("my_virtual_pets_api.Entities.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GlobalUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Personality")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GlobalUserId");

                    b.HasIndex("ImageId");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("my_virtual_pets_api.Entities.AuthUser", b =>
                {
                    b.HasOne("my_virtual_pets_api.Entities.GlobalUser", "GlobalUser")
                        .WithMany()
                        .HasForeignKey("GlobalUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GlobalUser");
                });

            modelBuilder.Entity("my_virtual_pets_api.Entities.LocalUser", b =>
                {
                    b.HasOne("my_virtual_pets_api.Entities.GlobalUser", "GlobalUser")
                        .WithMany()
                        .HasForeignKey("GlobalUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GlobalUser");
                });

            modelBuilder.Entity("my_virtual_pets_api.Entities.Pet", b =>
                {
                    b.HasOne("my_virtual_pets_api.Entities.GlobalUser", "GlobalUser")
                        .WithMany("Pets")
                        .HasForeignKey("GlobalUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("my_virtual_pets_api.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GlobalUser");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("my_virtual_pets_api.Entities.GlobalUser", b =>
                {
                    b.Navigation("Pets");
                });
#pragma warning restore 612, 618
        }
    }
}
